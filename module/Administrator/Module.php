<?php

/**
 * Generated by ZF2ModuleCreator
 */

namespace Administrator;

use Administrator\View\Helper\AdministratorFormRow;
use Zend\ModuleManager\Feature\AutoloaderProviderInterface;
use Zend\ModuleManager\Feature\ConfigProviderInterface;

use Zend\ModuleManager\ModuleEvent;
use Zend\ModuleManager\ModuleManager;
use Zend\Mvc\MvcEvent;
use Zend\Validator\AbstractValidator;

class Module implements AutoloaderProviderInterface, ConfigProviderInterface
{
    protected $mvcEvent;

    /**
     * Returns configuration to merge with application configuration
     *
     * @return array|\Traversable
     */
    public function getConfig()
    {
        return include __DIR__ . '/config/module.config.php';
    }

    /**
     * Return an array for passing to Zend\Loader\AutoloaderFactory.
     *
     * @return array
     */
    public function getAutoloaderConfig()
    {
        return array(
            'Zend\Loader\StandardAutoloader' => array(
                'namespaces' => array(
                    // Autoload all classes from namespace 'Administrator' from '/module/Administrator/src/Administrator'
                    __NAMESPACE__ => __DIR__ . '/src/' . __NAMESPACE__,
                )
            )
        );
    }

    public function getControllerConfig()
    {
        return array(
            'factories' => array(
                'Administrator\Factory\AdminControllerFactory' => 'Administrator\Factory\AdminControllerFactory',
            ),
            'invokables' => array(

            )
        );
    }

    public function getServiceConfig()
    {
        return array(
            'initializers' => array(
                'Administrator\Initializer\DatabaseInitializer',
            ),
            'abstract_factories' => array(
                'Administrator\Factory\AdministratorTableAbstractFactory',
                'Administrator\Factory\AdministratorModelAbstractFactory',
                'Administrator\Factory\DatatableConfigAbstractFactory',
            ),
            'factories' => array(

                'AuthService'                                       => 'Administrator\Service\AuthService',
                'Administrator\Service\SessionService'              => 'Administrator\Service\SessionService',
                'Administrator\Service\AdministratorFormService'    => 'Administrator\Service\AdministratorFormService',
                'Administrator\Service\DatatableService'            => 'Administrator\Service\DatatableService',
            ),
            'invokables' => array(
                'Administrator\Model\AuthStorage'                   => 'Administrator\Model\AuthStorage',
            )
        );
    }

    public function getViewHelperConfig()
    {
        return array(
            'invokables' => array(
                'AdministratorMenu' => 'Administrator\View\Helper\AdministratorMenu',
            ),
            'factories' => array(
                'administrator_form_row' => function ($sm) {
                    return new AdministratorFormRow($sm);
                }
            )
        );
    }

    public function onBootstrap(MvcEvent $e)
    {
        $this->mvcEvent = $e;

        $eventManager        = $e->getApplication()->getEventManager();
        $sharedEventManager  = $eventManager->getSharedManager();

        $sharedEventManager->attach( 'Zend\Mvc\Controller\AbstractActionController', 'dispatch', array($this, 'settingEventController'), 3);
    }

    public function settingEventController(MvcEvent $e)
    {
        $serviceManager = $this->mvcEvent->getApplication()->getServiceManager();
        $this->loadTranslations($serviceManager);
    }

    private function loadTranslations($serviceManager)
    {
        $translator = $serviceManager->get('translator');

        $locale = $translator->getLocale();

        $translateFilePath = __DIR__."/language/$locale/";
        $tranlationFiles = array(
            "Zend_Validate",
            "locale",
        );

        foreach ($tranlationFiles as $file) {
            $translateFile = $translateFilePath . "$file.php";
            $translateFile = str_replace('/',DIRECTORY_SEPARATOR,$translateFile);
            $translator->getTranslator()->addTranslationFile(
                'phpArray',
                $translateFile,
                'default',
                $locale);
        }


        AbstractValidator::setDefaultTranslator($translator);
    }
}