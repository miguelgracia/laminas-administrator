(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else {
        root.captureVideoFrame = factory();
    }
}(this, function () {
    return function captureVideoFrame(video, format) {
        if (typeof video === 'string') {
            video = document.getElementById(video);
        }

        format = format || 'jpeg';

        if (!video || (format !== 'png' && format !== 'jpeg')) {
            return false;
        }

        var canvas = document.createElement("CANVAS");

        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;

        canvas.getContext('2d').drawImage(video, 0, 0);

        var dataUri = canvas.toDataURL('img/' + format);
        var data = dataUri.split(',')[1];
        var mimeType = dataUri.split(';')[0].slice(5)

        var bytes = window.atob(data);
        var buf = new ArrayBuffer(bytes.length);
        var arr = new Uint8Array(buf);

        for (var i = 0; i < bytes.length; i++) {
            arr[i] = bytes.charCodeAt(i);
        }

        var blob = new Blob([ arr ], { type: mimeType });
        return { blob: blob, dataUri: dataUri, format: format };
    };
}));

/*! AdminLTE app.js
 * ================
 * Main JS application file for AdminLTE v2. This file
 * should be included in all pages. It controls some layout
 * options and implements exclusive AdminLTE plugins.
 *
 * @Author  Almsaeed Studio
 * @Support <http://www.almsaeedstudio.com>
 * @Email   <support@almsaeedstudio.com>
 * @version 2.3.0
 * @license MIT <http://opensource.org/licenses/MIT>
 */

//Make sure jQuery has been loaded before app.js
if (typeof jQuery === "undefined") {
  throw new Error("AdminLTE requires jQuery");
}

/* AdminLTE
 *
 * @type Object
 * @description $.AdminLTE is the main object for the template's app.
 *              It's used for implementing functions and options related
 *              to the template. Keeping everything wrapped in an object
 *              prevents conflict with other plugins and is a better
 *              way to organize our code.
 */
$.AdminLTE = {};

/* --------------------
 * - AdminLTE Options -
 * --------------------
 * Modify these options to suit your implementation
 */
$.AdminLTE.options = {
  //Add slimscroll to navbar menus
  //This requires you to load the slimscroll plugin
  //in every page before app.js
  navbarMenuSlimscroll: true,
  navbarMenuSlimscrollWidth: "3px", //The width of the scroll bar
  navbarMenuHeight: "200px", //The height of the inner menu
  //General animation speed for JS animated elements such as box collapse/expand and
  //sidebar treeview slide up/down. This options accepts an integer as milliseconds,
  //'fast', 'normal', or 'slow'
  animationSpeed: 500,
  //Sidebar push menu toggle button selector
  sidebarToggleSelector: "[data-toggle='offcanvas']",
  //Activate sidebar push menu
  sidebarPushMenu: true,
  //Activate sidebar slimscroll if the fixed layout is set (requires SlimScroll Plugin)
  sidebarSlimScroll: true,
  //Enable sidebar expand on hover effect for sidebar mini
  //This option is forced to true if both the fixed layout and sidebar mini
  //are used together
  sidebarExpandOnHover: false,
  //BoxRefresh Plugin
  enableBoxRefresh: true,
  //Bootstrap.js tooltip
  enableBSToppltip: true,
  BSTooltipSelector: "[data-toggle='tooltip']",
  //Enable Fast Click. Fastclick.js creates a more
  //native touch experience with touch devices. If you
  //choose to enable the plugin, make sure you load the script
  //before AdminLTE's app.js
  enableFastclick: true,
  //Control Sidebar Options
  enableControlSidebar: true,
  controlSidebarOptions: {
    //Which button should trigger the open/close event
    toggleBtnSelector: "[data-toggle='control-sidebar']",
    //The sidebar selector
    selector: ".control-sidebar",
    //Enable slide over content
    slide: true
  },
  //Box Widget Plugin. Enable this plugin
  //to allow boxes to be collapsed and/or removed
  enableBoxWidget: true,
  //Box Widget plugin options
  boxWidgetOptions: {
    boxWidgetIcons: {
      //Collapse icon
      collapse: 'fa-minus',
      //Open icon
      open: 'fa-plus',
      //Remove icon
      remove: 'fa-times'
    },
    boxWidgetSelectors: {
      //Remove button selector
      remove: '[data-widget="remove"]',
      //Collapse button selector
      collapse: '[data-widget="collapse"]'
    }
  },
  //Direct Chat plugin options
  directChat: {
    //Enable direct chat by default
    enable: true,
    //The button to open and close the chat contacts pane
    contactToggleSelector: '[data-widget="chat-pane-toggle"]'
  },
  //Define the set of colors to use globally around the website
  colors: {
    lightBlue: "#3c8dbc",
    red: "#f56954",
    green: "#00a65a",
    aqua: "#00c0ef",
    yellow: "#f39c12",
    blue: "#0073b7",
    navy: "#001F3F",
    teal: "#39CCCC",
    olive: "#3D9970",
    lime: "#01FF70",
    orange: "#FF851B",
    fuchsia: "#F012BE",
    purple: "#8E24AA",
    maroon: "#D81B60",
    black: "#222222",
    gray: "#d2d6de"
  },
  //The standard screen sizes that bootstrap uses.
  //If you change these in the variables.less file, change
  //them here too.
  screenSizes: {
    xs: 480,
    sm: 768,
    md: 992,
    lg: 1200
  },
  enableSimpleRouting: true
};

/* ------------------
 * - Implementation -
 * ------------------
 * The next block of code implements AdminLTE's
 * functions and plugins as specified by the
 * options above.
 */
$(function () {
  "use strict";

  //Fix for IE page transitions
  $("body").removeClass("hold-transition");

  //Extend options if external options exist
  if (typeof AdminLTEOptions !== "undefined") {
    $.extend(true,
            $.AdminLTE.options,
            AdminLTEOptions);
  }

  //Easy access to options
  var o = $.AdminLTE.options;

  //Set up the object
  _init();

  //Activate the layout maker
  $.AdminLTE.layout.activate();

  //Enable sidebar tree view controls
  $.AdminLTE.tree('.sidebar');

  //Enable control sidebar
  if (o.enableControlSidebar) {
    $.AdminLTE.controlSidebar.activate();
  }

  //Add slimscroll to navbar dropdown
  if (o.navbarMenuSlimscroll && typeof $.fn.slimscroll != 'undefined') {
    $(".navbar .menu").slimscroll({
      height: o.navbarMenuHeight,
      alwaysVisible: false,
      size: o.navbarMenuSlimscrollWidth
    }).css("width", "100%");
  }

  //Activate sidebar push menu
  if (o.sidebarPushMenu) {
    $.AdminLTE.pushMenu.activate(o.sidebarToggleSelector);
  }

  //Activate Bootstrap tooltip
  if (o.enableBSToppltip) {
    $('body').tooltip({
      selector: o.BSTooltipSelector
    });
  }

  //Activate box widget
  if (o.enableBoxWidget) {
    $.AdminLTE.boxWidget.activate();
  }

  //Activate fast click
  if (o.enableFastclick && typeof FastClick != 'undefined') {
    FastClick.attach(document.body);
  }

  //Activate direct chat widget
  if (o.directChat.enable) {
    $(document).on('click', o.directChat.contactToggleSelector, function () {
      var box = $(this).parents('.direct-chat').first();
      box.toggleClass('direct-chat-contacts-open');
    });
  }

  $.AdminLTE.simpleRouting = {};
  if(o.enableSimpleRouting) {

    $.AdminLTE.simpleRouting = $(document).simpleRouting();

    //Easy access to create lteController
    $.AdminLTE.srController = function(controllerName, callback) {
      $.AdminLTE.simpleRouting.lteController(controllerName,callback);
    };

    //Easy access to create lteClass
    $.AdminLTE.srClass = function(className, callback) {
      $.AdminLTE.simpleRouting.lteClass(className,callback);
    };

    //Easy access to run function
    $.AdminLTE.srRun = function() {
      return $.AdminLTE.simpleRouting.run();
    };

    //Easy access to routes function
    $.AdminLTE.srRoutes = function(routes) {
      return $.AdminLTE.simpleRouting.routes(routes);
    };
  }



  /*
   * INITIALIZE BUTTON TOGGLE
   * ------------------------
   */
  $('.btn-group[data-toggle="btn-toggle"]').each(function () {
    var group = $(this);
    $(this).find(".btn").on('click', function (e) {
      group.find(".btn.active").removeClass("active");
      $(this).addClass("active");
      e.preventDefault();
    });

  });
});

/* ----------------------------------
 * - Initialize the AdminLTE Object -
 * ----------------------------------
 * All AdminLTE functions are implemented below.
 */
function _init() {
  'use strict';
  /* Layout
   * ======
   * Fixes the layout height in case min-height fails.
   *
   * @type Object
   * @usage $.AdminLTE.layout.activate()
   *        $.AdminLTE.layout.fix()
   *        $.AdminLTE.layout.fixSidebar()
   */
  $.AdminLTE.layout = {
    activate: function () {
      var _this = this;
      _this.fix();
      _this.fixSidebar();
      $(window, ".wrapper").resize(function () {
        _this.fix();
        _this.fixSidebar();
      });
    },
    fix: function () {
      //Get window height and the wrapper height
      var neg = $('.main-header').outerHeight() + $('.main-footer').outerHeight();
      var window_height = $(window).height();
      var sidebar_height = $(".sidebar").height();
      //Set the min-height of the content and sidebar based on the
      //the height of the document.
      if ($("body").hasClass("fixed")) {
        $(".content-wrapper, .right-side").css('min-height', window_height - $('.main-footer').outerHeight());
      } else {
        var postSetWidth;
        if (window_height >= sidebar_height) {
          $(".content-wrapper, .right-side").css('min-height', window_height - neg);
          postSetWidth = window_height - neg;
        } else {
          $(".content-wrapper, .right-side").css('min-height', sidebar_height);
          postSetWidth = sidebar_height;
        }

        //Fix for the control sidebar height
        var controlSidebar = $($.AdminLTE.options.controlSidebarOptions.selector);
        if (typeof controlSidebar !== "undefined") {
          if (controlSidebar.height() > postSetWidth)
            $(".content-wrapper, .right-side").css('min-height', controlSidebar.height());
        }

      }
    },
    fixSidebar: function () {
      //Make sure the body tag has the .fixed class
      if (!$("body").hasClass("fixed")) {
        if (typeof $.fn.slimScroll != 'undefined') {
          $(".sidebar").slimScroll({destroy: true}).height("auto");
        }
        return;
      } else if (typeof $.fn.slimScroll == 'undefined' && window.console) {
        window.console.error("Error: the fixed layout requires the slimscroll plugin!");
      }
      //Enable slimscroll for fixed layout
      if ($.AdminLTE.options.sidebarSlimScroll) {
        if (typeof $.fn.slimScroll != 'undefined') {
          //Destroy if it exists
          $(".sidebar").slimScroll({destroy: true}).height("auto");
          //Add slimscroll
          $(".sidebar").slimscroll({
            height: ($(window).height() - $(".main-header").height()) + "px",
            color: "rgba(0,0,0,0.2)",
            size: "3px"
          });
        }
      }
    }
  };

  /* PushMenu()
   * ==========
   * Adds the push menu functionality to the sidebar.
   *
   * @type Function
   * @usage: $.AdminLTE.pushMenu("[data-toggle='offcanvas']")
   */
  $.AdminLTE.pushMenu = {
    activate: function (toggleBtn) {
      //Get the screen sizes
      var screenSizes = $.AdminLTE.options.screenSizes;

      //Enable sidebar toggle
      $(toggleBtn).on('click', function (e) {
        e.preventDefault();

        //Enable sidebar push menu
        if ($(window).width() > (screenSizes.sm - 1)) {
          if ($("body").hasClass('sidebar-collapse')) {
            $("body").removeClass('sidebar-collapse').trigger('expanded.pushMenu');
          } else {
            $("body").addClass('sidebar-collapse').trigger('collapsed.pushMenu');
          }
        }
        //Handle sidebar push menu for small screens
        else {
          if ($("body").hasClass('sidebar-open')) {
            $("body").removeClass('sidebar-open').removeClass('sidebar-collapse').trigger('collapsed.pushMenu');
          } else {
            $("body").addClass('sidebar-open').trigger('expanded.pushMenu');
          }
        }
      });

      $(".content-wrapper").click(function () {
        //Enable hide menu when clicking on the content-wrapper on small screens
        if ($(window).width() <= (screenSizes.sm - 1) && $("body").hasClass("sidebar-open")) {
          $("body").removeClass('sidebar-open');
        }
      });

      //Enable expand on hover for sidebar mini
      if ($.AdminLTE.options.sidebarExpandOnHover
              || ($('body').hasClass('fixed')
                      && $('body').hasClass('sidebar-mini'))) {
        this.expandOnHover();
      }
    },
    expandOnHover: function () {
      var _this = this;
      var screenWidth = $.AdminLTE.options.screenSizes.sm - 1;
      //Expand sidebar on hover
      $('.main-sidebar').hover(function () {
        if ($('body').hasClass('sidebar-mini')
                && $("body").hasClass('sidebar-collapse')
                && $(window).width() > screenWidth) {
          _this.expand();
        }
      }, function () {
        if ($('body').hasClass('sidebar-mini')
                && $('body').hasClass('sidebar-expanded-on-hover')
                && $(window).width() > screenWidth) {
          _this.collapse();
        }
      });
    },
    expand: function () {
      $("body").removeClass('sidebar-collapse').addClass('sidebar-expanded-on-hover');
    },
    collapse: function () {
      if ($('body').hasClass('sidebar-expanded-on-hover')) {
        $('body').removeClass('sidebar-expanded-on-hover').addClass('sidebar-collapse');
      }
    }
  };

  /* Tree()
   * ======
   * Converts the sidebar into a multilevel
   * tree view menu.
   *
   * @type Function
   * @Usage: $.AdminLTE.tree('.sidebar')
   */
  $.AdminLTE.tree = function (menu) {
    var _this = this;
    var animationSpeed = $.AdminLTE.options.animationSpeed;
    $(document).on('click', menu + ' li a', function (e) {
      //Get the clicked link and the next element
      var $this = $(this);
      var checkElement = $this.next();

      //Check if the next element is a menu and is visible
      if ((checkElement.is('.treeview-menu')) && (checkElement.is(':visible'))) {
        checkElement.css('display','block');
        //Close the menu
        checkElement.slideUp(animationSpeed, function () {
          checkElement.removeClass('menu-open');
          //Fix the layout in case the sidebar stretches over the height of the window
          //_this.layout.fix();
        });
        checkElement.parent("li").removeClass("active");
      }
      //If the menu is not visible
      else if ((checkElement.is('.treeview-menu')) && (!checkElement.is(':visible'))) {
        //Get the parent menu
        var parent = $this.parents('ul').first();
        //Close all open menus within the parent
        var ul = parent.find('ul:visible').slideUp(animationSpeed);
        //Remove the menu-open class from the parent
        ul.removeClass('menu-open');
        //Get the parent li
        var parent_li = $this.parent("li");

        //Open the target menu and add the menu-open class
        checkElement.slideDown(animationSpeed, function () {
          //Add the class active to the parent li
          checkElement.addClass('menu-open');
          parent.find('li.active').removeClass('active');
          parent_li.addClass('active');
          //Fix the layout in case the sidebar stretches over the height of the window
          _this.layout.fix();
        });
      }
      //if this isn't a link, prevent the page from being redirected
      if (checkElement.is('.treeview-menu')) {
        e.preventDefault();
      }
    });
  };

  /* ControlSidebar
   * ==============
   * Adds functionality to the right sidebar
   *
   * @type Object
   * @usage $.AdminLTE.controlSidebar.activate(options)
   */
  $.AdminLTE.controlSidebar = {
    //instantiate the object
    activate: function () {
      //Get the object
      var _this = this;
      //Update options
      var o = $.AdminLTE.options.controlSidebarOptions;
      //Get the sidebar
      var sidebar = $(o.selector);
      //The toggle button
      var btn = $(o.toggleBtnSelector);

      //Listen to the click event
      btn.on('click', function (e) {
        e.preventDefault();
        //If the sidebar is not open
        if (!sidebar.hasClass('control-sidebar-open')
                && !$('body').hasClass('control-sidebar-open')) {
          //Open the sidebar
          _this.open(sidebar, o.slide);
        } else {
          _this.close(sidebar, o.slide);
        }
      });

      //If the body has a boxed layout, fix the sidebar bg position
      var bg = $(".control-sidebar-bg");
      _this._fix(bg);

      //If the body has a fixed layout, make the control sidebar fixed
      if ($('body').hasClass('fixed')) {
        _this._fixForFixed(sidebar);
      } else {
        //If the content height is less than the sidebar's height, force max height
        if ($('.content-wrapper, .right-side').height() < sidebar.height()) {
          _this._fixForContent(sidebar);
        }
      }
    },
    //Open the control sidebar
    open: function (sidebar, slide) {
      //Slide over content
      if (slide) {
        sidebar.addClass('control-sidebar-open');
      } else {
        //Push the content by adding the open class to the body instead
        //of the sidebar itself
        $('body').addClass('control-sidebar-open');
      }
    },
    //Close the control sidebar
    close: function (sidebar, slide) {
      if (slide) {
        sidebar.removeClass('control-sidebar-open');
      } else {
        $('body').removeClass('control-sidebar-open');
      }
    },
    _fix: function (sidebar) {
      var _this = this;
      if ($("body").hasClass('layout-boxed')) {
        sidebar.css('position', 'absolute');
        sidebar.height($(".wrapper").height());
        $(window).resize(function () {
          _this._fix(sidebar);
        });
      } else {
        sidebar.css({
          'position': 'fixed',
          'height': 'auto'
        });
      }
    },
    _fixForFixed: function (sidebar) {
      sidebar.css({
        'position': 'fixed',
        'max-height': '100%',
        'overflow': 'auto',
        'padding-bottom': '50px'
      });
    },
    _fixForContent: function (sidebar) {
      $(".content-wrapper, .right-side").css('min-height', sidebar.height());
    }
  };

  /* BoxWidget
   * =========
   * BoxWidget is a plugin to handle collapsing and
   * removing boxes from the screen.
   *
   * @type Object
   * @usage $.AdminLTE.boxWidget.activate()
   *        Set all your options in the main $.AdminLTE.options object
   */
  $.AdminLTE.boxWidget = {
    selectors: $.AdminLTE.options.boxWidgetOptions.boxWidgetSelectors,
    icons: $.AdminLTE.options.boxWidgetOptions.boxWidgetIcons,
    animationSpeed: $.AdminLTE.options.animationSpeed,
    activate: function (_box) {
      var _this = this;
      if (!_box) {
        _box = document; // activate all boxes per default
      }
      //Listen for collapse event triggers
      $(_box).on('click', _this.selectors.collapse, function (e) {
        e.preventDefault();
        _this.collapse($(this));
      });

      //Listen for remove event triggers
      $(_box).on('click', _this.selectors.remove, function (e) {
        e.preventDefault();
        _this.remove($(this));
      });
    },
    collapse: function (element) {
      var _this = this;
      //Find the box parent
      var box = element.parents(".box").first();
      //Find the body and the footer
      var box_content = box.find("> .box-body, > .box-footer, > form  >.box-body, > form > .box-footer");
      if (!box.hasClass("collapsed-box")) {
        //Convert minus into plus
        element.children(":first")
                .removeClass(_this.icons.collapse)
                .addClass(_this.icons.open);
        //Hide the content
        box_content.slideUp(_this.animationSpeed, function () {
          box.addClass("collapsed-box");
        });
      } else {
        //Convert plus into minus
        element.children(":first")
                .removeClass(_this.icons.open)
                .addClass(_this.icons.collapse);
        //Show the content
        box_content.slideDown(_this.animationSpeed, function () {
          box.removeClass("collapsed-box");
        });
      }
    },
    remove: function (element) {
      //Find the box parent
      var box = element.parents(".box").first();
      box.slideUp(this.animationSpeed);
    }
  };
}

/* ------------------
 * - Custom Plugins -
 * ------------------
 * All custom plugins are defined below.
 */

/*
 * BOX REFRESH BUTTON
 * ------------------
 * This is a custom plugin to use with the component BOX. It allows you to add
 * a refresh button to the box. It converts the box's state to a loading state.
 *
 * @type plugin
 * @usage $("#box-widget").boxRefresh( options );
 */
(function ($) {

  "use strict";

  $.fn.boxRefresh = function (options) {

    // Render options
    var settings = $.extend({
      //Refresh button selector
      trigger: ".refresh-btn",
      //File source to be loaded (e.g: ajax/src.php)
      source: "",
      //Callbacks
      onLoadStart: function (box) {
        return box;
      }, //Right after the button has been clicked
      onLoadDone: function (box) {
        return box;
      } //When the source has been loaded

    }, options);

    //The overlay
    var overlay = $('<div class="overlay"><div class="fa fa-refresh fa-spin"></div></div>');

    return this.each(function () {
      //if a source is specified
      if (settings.source === "") {
        if (window.console) {
          window.console.log("Please specify a source first - boxRefresh()");
        }
        return;
      }
      //the box
      var box = $(this);
      //the button
      var rBtn = box.find(settings.trigger).first();

      //On trigger click
      rBtn.on('click', function (e) {
        e.preventDefault();
        //Add loading overlay
        start(box);

        //Perform ajax call
        box.find(".box-body").load(settings.source, function () {
          done(box);
        });
      });
    });

    function start(box) {
      //Add overlay and loading img
      box.append(overlay);

      settings.onLoadStart.call(box);
    }

    function done(box) {
      //Remove overlay and loading img
      box.find(overlay).remove();

      settings.onLoadDone.call(box);
    }

  };

})(jQuery);

/*
 * EXPLICIT BOX ACTIVATION
 * -----------------------
 * This is a custom plugin to use with the component BOX. It allows you to activate
 * a box inserted in the DOM after the app.js was loaded.
 *
 * @type plugin
 * @usage $("#box-widget").activateBox();
 */
(function ($) {

  'use strict';

  $.fn.activateBox = function () {
    $.AdminLTE.boxWidget.activate(this);
  };

})(jQuery);

/*
 * TODO LIST CUSTOM PLUGIN
 * -----------------------
 * This plugin depends on iCheck plugin for checkbox and radio inputs
 *
 * @type plugin
 * @usage $("#todo-widget").todolist( options );
 */
(function ($) {

  'use strict';

  $.fn.todolist = function (options) {
    // Render options
    var settings = $.extend({
      //When the user checks the input
      onCheck: function (ele) {
        return ele;
      },
      //When the user unchecks the input
      onUncheck: function (ele) {
        return ele;
      }
    }, options);

    return this.each(function () {

      if (typeof $.fn.iCheck != 'undefined') {
        $('input', this).on('ifChecked', function () {
          var ele = $(this).parents("li").first();
          ele.toggleClass("done");
          settings.onCheck.call(ele);
        });

        $('input', this).on('ifUnchecked', function () {
          var ele = $(this).parents("li").first();
          ele.toggleClass("done");
          settings.onUncheck.call(ele);
        });
      } else {
        $('input', this).on('change', function () {
          var ele = $(this).parents("li").first();
          ele.toggleClass("done");
          if ($('input', ele).is(":checked")) {
            settings.onCheck.call(ele);
          } else {
            settings.onUncheck.call(ele);
          }
        });
      }
    });
  };
}(jQuery));
/**
 * =============
 * Routing
 * =============
 */
(function($){
    $.fn.simpleRouting =(function() {
        var _this = this;

        _this.oController = {};
        _this.oClassInstances = {};

        var _settings = {
                debug: true,
                route_mode: 'param', // param, object
                init_controller_name: 'data-ds-controller'
            },
            _routes,
            _oCallbacks = {
                lteController: {},
                lteClass: {}
            },
            _exceptionCallback = function(message) {
                this.message = message;
            },
            _DsCallbackUndefinedException  = _exceptionCallback,
            _DsObjExistsException          = _exceptionCallback,
            _DsInstanceControllerException = _exceptionCallback,
            _DsMethodControllerException   = _exceptionCallback,

            _instantiateClasses = function() {
                var lteClassName,lteClassInstance;

                for(lteClassName in _oCallbacks.lteClass) {
                    _this.oClassInstances[lteClassName] = {};
                    (_oCallbacks.lteClass[lteClassName]).apply(_this.oClassInstances[lteClassName],[_this]);
                    _this[lteClassName] = _this.oClassInstances[lteClassName];
                }

                for(lteClassInstance in _this.oClassInstances) {
                    var oClass = _this.oClassInstances[lteClassInstance];
                    if(typeof oClass.init !== 'undefined' && typeof oClass.init === 'function') {
                        oClass.init();
                    }
                }
            },

            _runClassesComplete = function() {
                var lteClassInstance;
                for(lteClassInstance in _this.oClassInstances) {
                    var oClass = _this.oClassInstances[lteClassInstance];
                    if(typeof oClass.complete !== 'undefined' && typeof oClass.complete === 'function') {
                        oClass.complete();
                    }
                }
            },

            _instantiateController = function(name, method) {
                if(typeof _oCallbacks.lteController[name] !== 'undefined') {
                    (_oCallbacks.lteController[name]).apply(_this.oController);
                    if(typeof _this.oController[method] == 'function') {
                        _this.oController[method].apply(_this);
                    } else {
                        throw new _DsMethodControllerException('The method controller "' + controllerMethod + '" does not exists');
                    }
                } else {
                    throw new _DsInstanceControllerException('The controller "' + controllerName + '" does not exists');
                }
            },

            _add = function (type, objName, callbackFn) {
                try {
                    if(typeof(callbackFn) !== 'undefined' && typeof(callbackFn) === 'function') {
                        if (typeof(_oCallbacks[type][objName]) === 'undefined') {
                            _oCallbacks[type][objName] = callbackFn;
                        } else {
                            throw new _DsObjExistsException(objName + '. The ' + type + ' object already exists.');
                        }
                    } else {
                        throw new _DsCallbackUndefinedException(objName + '. controller function is undefined.');
                    }
                } catch(e) {
                    _this.debug(e,'error');
                }
            };

        _this.debug = function (msg, type) {
            type = typeof type == 'string' ? type : 'log';
            if(_settings.debug) {
                if(typeof window.console === 'object') {
                    console[type](msg);
                } else {
                    alert(msg);
                }
            }
        };

        _this.lteController = function (objName, callbackFn) {
            _add('lteController', objName, callbackFn);
        };

        _this.lteClass = function (objName, callbackFn) {
            _add('lteClass', objName, callbackFn);
        };

        _this.routes = function (routes) {
            _routes = routes;
            return _this;
        };

        _this.run = function (customSettings) {

            jQuery.extend(_settings,customSettings);

            var controller,
                controllerName,
                controllerMethod,
                currentPath;

            try {
                _instantiateClasses();
                if(typeof _routes == 'object') {
                    currentPath = location.pathname;
                    var regExp;
                    for(var path in _routes) {
                        var strRegEx = path.replace('{:num}','[0-9]+').replace('{:any}','[A-z0-9_.\-\~]+');
                        regExp = new RegExp(strRegEx + '$');
                        if(regExp.test(currentPath)) {
                            if(_routes[path] instanceof Array) {
                                _instantiateController(_routes[path][0], _routes[path][1]);
                            } else if(typeof _routes[path] == 'function') {
                                _routes[path].apply(_this);
                            }
                            break;
                        }
                    }
                } else {
                    controller = document.getElementById(_settings.init_controller_name);

                    if(controller) {
                        controllerName = controller.getAttribute('value');
                        controllerMethod = controller.getAttribute('name');
                        _instantiateController(controllerName, controllerMethod);
                    } else {
                        _this.debug('This view has not controllers');
                    }
                    _runClassesComplete();
                }
            } catch (e) {
                _this.debug(e,'error');
            }
        };

        return this;
    });
})(jQuery);
$(function () {
    $.AdminLTE.srClass('ajax', function() {

        var defaultOptions = {
            method: 'POST',
            dataType: 'json'
        };

        this.run = function (options, callbackSuccess) {

            $.extend(defaultOptions, options);

            $.ajax(defaultOptions).success(callbackSuccess);
        };
    });
});
$(function () {
    $.AdminLTE.srClass('browsefile', function() {

        var config = {
            className: 'browsefile',
            iframeUrl: '/admin/media?modal=on'
        };

        var oWindow,
            browserInputs = {},
            $inputTarget = null;

        function OpenServerBrowser( url, width, height )
        {
            var iLeft = (screen.width - width) / 2 ;
            var iTop = (screen.height - height) / 2 ;
            var sOptions = "toolbar=no,status=no,resizable=yes,dependent=yes" ;
            sOptions += ",width=" + width ;
            sOptions += ",height=" + height ;
            sOptions += ",left=" + iLeft ;
            sOptions += ",top=" + iTop ;
            oWindow = window.open( url, "BrowseWindow", sOptions ) ;
        }

        function browseServer(obj)
        {
            $inputTarget = obj;
            OpenServerBrowser(
                config.iframeUrl,
                screen.width * 0.7,
                screen.height * 0.7 ) ;
        }

        this.init = function() {
            var inputs;

            window.SetUrl = function ( url, width, height, alt )
            {
                $inputTarget.val(url);
                oWindow = null;
            };

            var addInputText = function(input, canDelete) {

                canDelete = canDelete || false;

                var $input = $(input);

                var $inputWrap = $('<div class="input-group"></div>');

                $input.wrap($inputWrap);


                var buttonWrapperHtml =
                    '<span class="input-group-btn">' +
                        ((input.dataset.isMultiple == '1' && canDelete) ? '<button data-target="' + $input.attr('id') + '" type="button" class="btn btn-danger btn-flat">Descartar</button>' : '')+
                        '<button data-target="' + $input.attr('id') + '" type="button" class="btn btn-info btn-flat">Buscar</button>' +
                    '</span>';

                var $buttonWrapper = $(buttonWrapperHtml);

                $input.parent().append($buttonWrapper);

                browserInputs[$input.attr('id')] = $input;
                $buttonWrapper.find('button').on('click', function () {
                    var $this = $(this),
                        target = $this.data('target');

                    if($this.hasClass('btn-danger')) {
                        if($.AdminLTE.simpleRouting.confirm.show('Está seguro de que quiere desvíncular esta imagen?')) {
                            $this.parents('.input-group').parent().parent().remove();
                        }
                    } else {
                        browseServer($('#'+target));
                    }
                });
            };

            var addInputEvent = function () {
                var $this = $(this);
                var newInput = $this.prev().find('.browsefile').clone();
                    newInput[0].removeEventListener('click',addInputEvent,false);

                var newIndex = parseInt(newInput.attr('data-index')) + 1;
                newInput.attr('data-index', newIndex);
                newInput.attr('id', newInput.attr('data-id') + newIndex);
                newInput.val('');

                var $newWrapper =
                    $('<div class="form-group">' +
                        '<div class="col-xs-12">' +
                        '</div>' +
                     '</div>');


                $newWrapper.find('.col-xs-12').prepend(newInput[0]);
                console.log($newWrapper[0]);
                $newWrapper.insertBefore($this);

                addInputText(newInput[0],true);
            };

            inputs = document.getElementsByClassName(config.className);

            for(var idx = 0; idx < inputs.length; idx++) {
                addInputText(inputs[idx], idx != 0);
            }

            var addFileButtons = document.getElementsByClassName('allow_multiple_files');
            for(var btn = 0; btn < addFileButtons.length; btn++ ) {
                addFileButtons[btn].addEventListener('click',addInputEvent,false);
            }
        };

    });
});
$(function () {
    $.AdminLTE.srClass('callout', function () {

        var $dsCallout, $applicationContent;

        this.init = function() {
            $applicationContent = $('#admin_app');

            $dsCallout = $('#ds_callout');

            if($dsCallout.length == 0) {
                $dsCallout = $('<div id="ds_callout"></div>');
                $dsCallout.prependTo($applicationContent);
            }
        };

        this.show = function(message,title, type) {
            type = typeof type == 'undefined' ? 'success' : type;
            title = typeof title == 'undefined' ? '&nbsp' : title;

            var $tpl =
                $("<div class='alert-dismissable alert alert-" + type + "'>" +
                    "<button type='button' class='close' data-dismiss='alert' aria-hidden='true'>&times;</button>" +
                    "<h4>" + title + "</h4>" +
                    "<p>" + message + "</p>" +
                    "</div>");

            setTimeout(function() {
                $tpl.fadeOut(function() {
                    $(this).remove()
                });
            },5000);

            $dsCallout.append($tpl);
        };
    });
});
$(function () {
    $.AdminLTE.srClass('confirm', function() {
        this.show = function(message) {
            return confirm(message);
        };
    });
});
$(function () {
    $.AdminLTE.srClass ('dsDatatable', function () {
        var dataTable,
            oDataTable = {},
            language  = {
                "decimal":        "",
                "emptyTable":     "No hay datos disponibles",
                "info":           "Viendo _START_ de _END_ de un total de _TOTAL_ registros",
                "infoEmpty":      "Viendo 0 de 0 de un total de 0 registros",
                "infoFiltered":   "(filtrado de un total de _MAX_ registros)",
                "infoPostFix":    "",
                "thousands":      ",",
                "lengthMenu":     "Mostrar _MENU_ registros",
                "loadingRecords": "Cargando...",
                "processing":     "Procesando...",
                "search":         "Buscar:",
                "zeroRecords":    "No se han encontrado resultados",
                "paginate": {
                    "first":      "Primera",
                    "last":       "Última",
                    "next":       "Siguiente",
                    "previous":   "Anterior"
                },
                "aria": {
                    "sortAscending":  ": activate to sort column ascending",
                    "sortDescending": ": activate to sort column descending"
                }
            };

        this.run = function(tableId, customConfig, initCompleteFn) {

            var $table = $(tableId);

            if(typeof customConfig == 'function') {
                initCompleteFn = customConfig;
                customConfig = {};
            }

            $table.css('width','100%');

            var settings = $table.data('settings'),
                headers = settings.headers,
                columns = [],
                order = [],
                $th,
                $trHead = $table.find('thead tr'),
                $trFoot = $table.find('tfoot tr'),
                i,
                counter = 0;

            for(i in headers) {
                var headerAttributes = headers[i].headerAttributes, headerAttr,
                    jsonKey = typeof headers[i].json_key == 'undefined' ? i : headers[i].json_key;

                $th = $('<th data-name="' + i + '">' + headers[i].value + '</th>');
                headers[i].options.data = jsonKey;
                columns.push(headers[i].options);

                if(typeof headers[i].order != 'undefined') {
                    order.push([counter,headers[i].order]);
                }

                for(headerAttr in headerAttributes) {
                    $th.attr(headerAttr,headerAttributes[headerAttr]);
                }

                $trHead.append($th);
                $trFoot.append($th.clone());
                counter++;
            }

            $trHead.first().find('th').each(function (x, header) {
                var $header = $(header),
                    title = $header.text(),
                    columnName = $header.data('name'),
                    inputElem = '';

                if(typeof columns[$header.index()] !== 'undefined' && columns[$header.index()].searchable) {

                    if(typeof settings.dropdown_filters != 'undefined' && typeof settings.dropdown_filters[columnName] != 'undefined') {
                        var options = settings.dropdown_filters[columnName], c,
                            $select = '<select>';

                        $select += '<option value="">' + title + '</option>';
                        for(c in options) {
                            $select += '<option value="' + c + '">' + options[c] + '</option>';
                        }
                        $select += '</select>';

                        inputElem = $select;
                    } else {
                        inputElem = '<input type="text" placeholder="' + title + '" />'
                    }
                }
                $header.html(inputElem);
            });

            $.fn.dataTable.ext.errMode = "none";

            var defaultConfig = {
                "iDisplayLength": 10,
                "sServerMethod": "post",
                "processing": true,
                "serverSide": true,
                "sDom": "lip<'horizontal-scroll't>ipr",
                "ajax": {
                    'url': document.location.href
                },
                "language": language,
                "columns": columns,
                "order": order,
                "rowCallback": function(row, data, index) {}
            };

            $.extend(defaultConfig, customConfig);

            //initComplete lo sobreescribimos siempre, ya que tiene lógica de existir siempre
            //pero tenemos la opción de entrar en ella desde el parametro initCompleteFn

            defaultConfig.initComplete = function() {

                var everyFn = function () {

                    var that = this,
                        $header = $(this.header()),
                        headerIndex = $header.index(),
                        $headerFilter = $header.parent().prev().children().eq(headerIndex);

                    $( 'input, select', $headerFilter).on( 'keyup change', function () {
                        if ( that.search() !== this.value ) {
                            that
                                .search( this.value )
                                .draw();
                        }
                    } );
                };

                this.api().columns().every(everyFn);

                if(typeof initCompleteFn == 'function') {
                    initCompleteFn(this);
                }
            };

            dataTable = $table.on('xhr.dt',function(e, settings, json, xhr) {
                if(typeof json.data == 'undefined') {
                    if(typeof json.error != 'undefined' && json.error == true) {
                        alert(json.message);
                        location.reload();
                    }
                }

            }).on('error.dt',function(e, settings, techNote, message) {
                console.log('Datatable Error');
                console.log(techNote);
                console.log(message);
            }).DataTable(defaultConfig);

            return dataTable;
        };

        return this;
    });
});

/**
 * Temporalmente deprecated
 *
 */
$(function () {
    $.AdminLTE.srClass('plupload', function() {

        var plUploadContainer = document.getElementById('uploader');

        this.init_ = function() { //Plupload no lo usamos actualmente.

            if(plUploadContainer) {
                $(plUploadContainer).pluploadQueue({
                    // General settings
                    runtimes : 'html5,html4',
                    url : "/admin/media/upload",
                    multipart_params: {
                        'module_target': document.getElementById('media_module_target').value,
                        'module_id': document.getElementById('media_module_id').value
                    },
                    chunk_size : '1mb',
                    rename : false,
                    dragdrop: true,

                    filters : {

                        max_file_size : '10mb',

                        mime_types: [
                            {title : "Image files", extensions : "jpg,gif,png"}
                        ]
                    }
                });
            }
        };
    });
});
$(function () {
    $.AdminLTE.srClass('wysiwyg', function() {

        var textarea = document.getElementsByTagName('textarea');

        this.init = function() {
            var applyCKEditorEvents = false;

            var setBrowseButton = function (browseButton, event) {
                var cleanUpFuncRef = CKEDITOR.tools.addFunction(function ()
                {
                    // Do the clean-up of filemanager here (called when an image was selected or cancel was clicked)
                    $('#filemanager_iframe').remove();
                    $("body").css("overflow-y", "scroll");
                });

                var editor = event.editor;

                browseButton.hidden = false;
                browseButton.onClick = function (dialog, i)
                {
                    editor._.filebrowserSe = this;
                    var base_url = document.location.protocol + '//' + document.location.host + '/admin/media';
                    var iframe = $("<iframe id='filemanager_iframe' class='fm-modal'/>").attr({
                        src: base_url + // Change it to wherever  Filemanager is stored.
                        '?modal=on&config=inlinefilemanager.config.json&CKEditorFuncNum=' + CKEDITOR.instances[event.editor.name]._.filebrowserFn +
                        '&CKEditorCleanUpFuncNum=' + cleanUpFuncRef +
                        '&langCode=es' +
                        '&CKEditor=' + event.editor.name
                    });

                    $("body")
                        .css("overflow-y", "hidden") // Get rid of possible scrollbars in containing document
                        .append(iframe);
                }
            };
            for(var idx = 0; idx < textarea.length; idx++) {

                if(!textarea[idx].classList.contains('no-editor')) {
                    applyCKEditorEvents = true;
                    CKEDITOR.config.extraAllowedContent = 'video(*){*}[*];source(*){*}[*]';
                    CKEDITOR.replace(textarea[idx].getAttribute('id'));
                }
            }

            if(applyCKEditorEvents) {

                CKEDITOR.on('dialogDefinition', function (event)
                {
                    var dialogDefinition = event.data.definition;
                    var dialogName = event.data.name;

                    var tabCount = dialogDefinition.contents.length;

                    for (var i = 0; i < tabCount; i++) {
                        var browseButton;

                        if(dialogName == 'video') {
                            var elements = dialogDefinition.contents[i].elements;
                            var elementsCount = elements.length;

                            if(typeof dialogDefinition.contents[i] != 'undefined') {
                                for(var e = 0; e < elementsCount; e++) {
                                    var hboxElement = dialogDefinition.contents[i].elements[e];
                                    if(typeof hboxElement.children != 'undefined') {
                                        var hboxChildrenCount = hboxElement.children.length;
                                        for(var h = 0; h < hboxChildrenCount; h++) {
                                            if(typeof hboxElement.children[h].filebrowser != 'undefined') {
                                                browseButton = hboxElement.children[h];
                                                setBrowseButton(browseButton, event);
                                            }
                                        }
                                    }
                                }
                            }
                        } else {

                            if(typeof dialogDefinition.contents[i] != 'undefined') {
                                browseButton = dialogDefinition.contents[i].get('browse');

                                if (browseButton !== null) {
                                    setBrowseButton(browseButton, event);
                                }
                            }
                        }
                    }



                }); // dialogDefinition*/
            }
        };
    });
});

$(function () {
    $.AdminLTE.srController('app_data', function () {
        this.index = function() {

            var oDatatable = $.AdminLTE.simpleRouting.dsDatatable;
            oDatatable.run('#appDataTable',function() {

            });
        };

        this.edit = function() {


        };
    });
});
$(function () {
    $.AdminLTE.srController('blog', function () {
        this.index = function() {

            var oDatatable = $.AdminLTE.simpleRouting.dsDatatable;
            oDatatable.run('#blogTable',function (dataTable){

                var clickDelete = function(e) {
                    e.preventDefault();
                    var $this = $(this);
                    var isConfirm = $.AdminLTE.simpleRouting.confirm.show('¿Seguro que deseas eliminar esta entrada de blog?');

                    var ajaxSuccessEliminar = function(data) {
                        if(data.status == 'ok') {
                            dataTable.api().draw(false);
                        }
                        if(typeof data.message != 'undefined') {
                            $.AdminLTE.simpleRouting.callout.show(data.message);
                        }
                    };
                    if(isConfirm) {
                        $.AdminLTE.simpleRouting.ajax.run({
                            url: $this.parent().attr('href')
                        }, ajaxSuccessEliminar);
                    }
                };

                $(document.body)
                    .on('click','.js-eliminar',clickDelete);
            });
        };

        this.edit = function() {


        };
    });
});
$(function () {
    $.AdminLTE.srController('blog_category', function () {
        this.index = function() {

            var oDatatable = $.AdminLTE.simpleRouting.dsDatatable;
            oDatatable.run('#blogCategoryTable',function (dataTable){

                var clickDelete = function(e) {
                    e.preventDefault();
                    var $this = $(this);
                    var isConfirm = $.AdminLTE.simpleRouting.confirm.show('¿Seguro que deseas eliminar esta categoría de blog?');

                    var ajaxSuccessEliminar = function(data) {
                        if(data.status == 'ok') {
                            dataTable.api().draw(false);
                        }
                        if(typeof data.message != 'undefined') {
                            $.AdminLTE.simpleRouting.callout.show(data.message);
                        }
                    };
                    if(isConfirm) {
                        $.AdminLTE.simpleRouting.ajax.run({
                            url: $this.parent().attr('href')
                        }, ajaxSuccessEliminar);
                    }
                };

                $(document.body)
                    .on('click','.js-eliminar',clickDelete);
            });
        };
    });
});
$(function () {
    $.AdminLTE.srController('home_module', function () {
        this.index = function() {

            var oDatatable = $.AdminLTE.simpleRouting.dsDatatable;
            oDatatable.run('#homeModuleTable',function (dataTable){

                var clickDelete = function(e) {
                    e.preventDefault();
                    var $this = $(this);
                    var isConfirm = $.AdminLTE.simpleRouting.confirm.show('¿Seguro que deseas eliminar este módulo de home?');

                    var ajaxSuccessEliminar = function(data) {
                        if(data.status == 'ok') {
                            dataTable.api().draw(false);
                        }
                        if(typeof data.message != 'undefined') {
                            $.AdminLTE.simpleRouting.callout.show(data.message);
                        }
                    };
                    if(isConfirm) {
                        $.AdminLTE.simpleRouting.ajax.run({
                            url: $this.parent().attr('href')
                        }, ajaxSuccessEliminar);
                    }
                };

                $(document.body)
                    .on('click','.js-eliminar',clickDelete);
            });
        };
    });
});
$(function () {
    $.AdminLTE.srController('job', function () {
        this.index = function() {

            var oDatatable = $.AdminLTE.simpleRouting.dsDatatable;
            oDatatable.run('#jobTable',function (dataTable){

                var clickDelete = function(e) {
                    e.preventDefault();
                    var $this = $(this);
                    var isConfirm = $.AdminLTE.simpleRouting.confirm.show('¿Seguro que deseas eliminar este trabajo?');

                    var ajaxSuccessEliminar = function(data) {
                        if(data.status == 'ok') {
                            dataTable.api().draw(false);
                        }
                        if(typeof data.message != 'undefined') {
                            $.AdminLTE.simpleRouting.callout.show(data.message);
                        }
                    };
                    if(isConfirm) {
                        $.AdminLTE.simpleRouting.ajax.run({
                            url: $this.parent().attr('href')
                        }, ajaxSuccessEliminar);
                    }
                };

                $(document.body)
                    .on('click','.js-eliminar',clickDelete);
            });
        };

        this.edit = function() {


        };
    });
});
$(function () {
    $.AdminLTE.srController('job_category', function () {
        this.index = function() {

            var oDatatable = $.AdminLTE.simpleRouting.dsDatatable;
            oDatatable.run('#jobCategoryTable',function (dataTable){

                var clickDelete = function(e) {
                    e.preventDefault();
                    var $this = $(this);
                    var isConfirm = $.AdminLTE.simpleRouting.confirm.show('¿Seguro que deseas eliminar esta categoría de trabajos?');

                    var ajaxSuccessEliminar = function(data) {
                        if(data.status == 'ok') {
                            dataTable.api().draw(false);
                        }
                        if(typeof data.message != 'undefined') {
                            $.AdminLTE.simpleRouting.callout.show(data.message);
                        }
                    };
                    if(isConfirm) {
                        $.AdminLTE.simpleRouting.ajax.run({
                            url: $this.parent().attr('href')
                        }, ajaxSuccessEliminar);
                    }
                };

                $(document.body)
                    .on('click','.js-eliminar',clickDelete);
            });
        };
    });
});
$(function () {
    $.AdminLTE.srController('language', function () {
        this.index = function() {

            var oDatatable = $.AdminLTE.simpleRouting.dsDatatable;
            oDatatable.run('#languageTable',function (dataTable){

                var clickDelete = function(e) {
                    e.preventDefault();
                    var $this = $(this);
                    var isConfirm = $.AdminLTE.simpleRouting.confirm.show('¿Seguro que deseas eliminar este idioma?');

                    var ajaxSuccessEliminar = function(data) {
                        if(data.status == 'ok') {
                            dataTable.api().draw(false);
                        }
                        if(typeof data.message != 'undefined') {
                            $.AdminLTE.simpleRouting.callout.show(data.message);
                        }
                    };
                    if(isConfirm) {
                        $.AdminLTE.simpleRouting.ajax.run({
                            url: $this.parent().attr('href')
                        }, ajaxSuccessEliminar);
                    }
                };

                $(document.body)
                    .on('click','.js-eliminar',clickDelete);
            });
        };

        this.edit = function() {


        };
    });
});
$(function () {
    $.AdminLTE.srController('megabanner', function () {
        this.index = function() {

            var oDatatable = $.AdminLTE.simpleRouting.dsDatatable;
            oDatatable.run('#megabannerTable',function (dataTable){

                var clickDelete = function(e) {
                    e.preventDefault();
                    var $this = $(this);
                    var isConfirm = $.AdminLTE.simpleRouting.confirm.show('¿Seguro que deseas eliminar este megabanner?');

                    var ajaxSuccessEliminar = function(data) {
                        if(data.status == 'ok') {
                            dataTable.api().draw(false);
                        }
                        if(typeof data.message != 'undefined') {
                            $.AdminLTE.simpleRouting.callout.show(data.message);
                        }
                    };
                    if(isConfirm) {
                        $.AdminLTE.simpleRouting.ajax.run({
                            url: $this.parent().attr('href')
                        }, ajaxSuccessEliminar);
                    }
                };

                $(document.body)
                    .on('click','.js-eliminar',clickDelete);
            });
        };

        this.edit = function() {


        };
    });
});
$(function () {
    $.AdminLTE.srController('menu', function () {

        this.index = function() {
            var menuAccordion = document.getElementById("menu_accordion");
            var $listGroupSubMenu = $('.list-group.sub-menu');

            var updateOrderCallback = function(e) {
                var $target = $(e.target);
                var elementIds = [];

                $target.children().each(function (x, elem) {
                    elementIds.push($(elem).data('id'));
                });
                $.AdminLTE.simpleRouting.ajax.run({
                    url: '/admin/menu/save-order',
                    data: {
                        elements:elementIds
                    }
                }, function(json) {
                    if(typeof json.error != 'undefined' && json.error == true) {
                        alert(json.message);
                        location.reload();
                    }
                });
            };

            Sortable.create(menuAccordion, {
                "draggable": ".panel.box",
                "onUpdate": updateOrderCallback
            });
            $listGroupSubMenu.each(function (x, elem){
                Sortable.create(elem,{
                    "onUpdate": updateOrderCallback
                });
            });

            $(menuAccordion).find('.btn-remove').click(function(e) {
                e.preventDefault();
                var canDelete = $.AdminLTE.simpleRouting.confirm.show("¿Deseas eliminar esta opción de menú?");
                if(canDelete) {
                    document.location.href = $(this).attr('href');
                }
            });
        };

        this.addAndedit = function() {
            var $accion = $('#action').select2({width: '100%'});

            var $optGroupAccion = $accion.find('optgroup');

            var $gestorModuleId = $('#adminModuleId').select2({width: '100%'});

            var changeModuleId = function(e) {
                var optionSelected = $(e.target).find('option:selected').text();
                $optGroupAccion.addClass('hide').find('option').attr('disabled','disabled');

                $optGroupAccion.filter('[label="'+optionSelected+'"]').find('option').removeAttr('disabled');

                $accion.select2();
            };

            $gestorModuleId.on('change',changeModuleId);
        };
    });
});
$(function () {
    $.AdminLTE.srController('module', function () {
        this.index = function() {

            var oDatatable = $.AdminLTE.simpleRouting.dsDatatable;
            oDatatable.run('#moduleTable',function (dataTable){

                var clickDelete = function(e) {
                    e.preventDefault();
                    var $this = $(this);
                    var isConfirm = $.AdminLTE.simpleRouting.confirm.show('¿Seguro que deseas eliminar este modulo?');

                    var ajaxSuccessEliminar = function(data) {
                        if(data.status == 'ok') {
                            dataTable.api().draw(false);
                        }
                        if(typeof data.message != 'undefined') {
                            $.AdminLTE.simpleRouting.callout.show(data.message);
                        }
                    };
                    if(isConfirm) {
                        $.AdminLTE.simpleRouting.ajax.run({
                            url: $this.parent().attr('href')
                        }, ajaxSuccessEliminar);
                    }
                };

                $(document.body)
                    .on('click','.js-eliminar-usuario',clickDelete);
            });
        };
    });
});

$(function () {
    $.AdminLTE.srController('partner', function () {
        this.index = function() {

            var oDatatable = $.AdminLTE.simpleRouting.dsDatatable;
            oDatatable.run('#partnerTable',function (dataTable){

                var clickDelete = function(e) {
                    e.preventDefault();
                    var $this = $(this);
                    var isConfirm = $.AdminLTE.simpleRouting.confirm.show('¿Seguro que deseas eliminar este colaborador?');

                    var ajaxSuccessEliminar = function(data) {
                        if(data.status == 'ok') {
                            dataTable.api().draw(false);
                        }
                        if(typeof data.message != 'undefined') {
                            $.AdminLTE.simpleRouting.callout.show(data.message);
                        }
                    };
                    if(isConfirm) {
                        $.AdminLTE.simpleRouting.ajax.run({
                            url: $this.parent().attr('href')
                        }, ajaxSuccessEliminar);
                    }
                };

                $(document.body)
                    .on('click','.js-eliminar',clickDelete);
            });
        };
    });
});
$(function () {
    $.AdminLTE.srController('profile', function () {
        this.index = function() {

            var oDatatable = $.AdminLTE.simpleRouting.dsDatatable;
            oDatatable.run('#profileTable',function (dataTable){

                var clickDelete = function(e) {
                    e.preventDefault();
                    var $this = $(this);
                    var isConfirm = $.AdminLTE.simpleRouting.confirm.show('¿Seguro que deseas eliminar este perfil?');

                    var ajaxSuccessEliminar = function(data) {
                        if(data.status == 'ok') {
                            dataTable.api().draw(false);
                        }
                        if(typeof data.message != 'undefined') {
                            $.AdminLTE.simpleRouting.callout.show(data.message);
                        }
                    };
                    if(isConfirm) {
                        $.AdminLTE.simpleRouting.ajax.run({
                            url: $this.parent().attr('href')
                        }, ajaxSuccessEliminar);
                    }
                };

                $(document.body)
                    .on('click','.js-eliminar-usuario',clickDelete);
            });
        };
    });
});

$(function () {
    $.AdminLTE.srController('section', function () {
        this.index = function() {

            var oDatatable = $.AdminLTE.simpleRouting.dsDatatable;
            oDatatable.run('#sectionTable',function (dataTable){

                var clickDelete = function(e) {
                    e.preventDefault();
                    var $this = $(this);
                    var isConfirm = $.AdminLTE.simpleRouting.confirm.show('¿Seguro que deseas eliminar esta sección?');

                    var ajaxSuccessEliminar = function(data) {
                        if(data.status == 'ok') {
                            dataTable.api().draw(false);
                        }
                        if(typeof data.message != 'undefined') {
                            $.AdminLTE.simpleRouting.callout.show(data.message);
                        }
                    };
                    if(isConfirm) {
                        $.AdminLTE.simpleRouting.ajax.run({
                            url: $this.parent().attr('href')
                        }, ajaxSuccessEliminar);
                    }
                };

                $(document.body)
                    .on('click','.js-eliminar',clickDelete);
            });
        };

        this.edit = function() {


        };
    });
});
$(function () {
    $.AdminLTE.srController('static_page', function () {
        this.index = function() {

            var oDatatable = $.AdminLTE.simpleRouting.dsDatatable;
            oDatatable.run('#staticPageTable',function (dataTable){

                var clickDelete = function(e) {
                    e.preventDefault();
                    var $this = $(this);
                    var isConfirm = $.AdminLTE.simpleRouting.confirm.show('¿Seguro que deseas eliminar esta página?');

                    var ajaxSuccessEliminar = function(data) {
                        if(data.status == 'ok') {
                            dataTable.api().draw(false);
                        }
                        if(typeof data.message != 'undefined') {
                            $.AdminLTE.simpleRouting.callout.show(data.message);
                        }
                    };
                    if(isConfirm) {
                        $.AdminLTE.simpleRouting.ajax.run({
                            url: $this.parent().attr('href')
                        }, ajaxSuccessEliminar);
                    }
                };

                $(document.body)
                    .on('click','.js-eliminar',clickDelete);
            });
        };

        this.edit = function() {


        };
    });
});
$(function () {
    $.AdminLTE.srController('user', function () {
        this.index = function() {

            var oDatatable = $.AdminLTE.simpleRouting.dsDatatable;
            oDatatable.run('#userTable',function (dataTable){

                var clickDelete = function(e) {
                    e.preventDefault();
                    var $this = $(this);
                    var isConfirm = $.AdminLTE.simpleRouting.confirm.show('¿Seguro que deseas eliminar este usuario?');

                    var ajaxSuccessEliminar = function(data) {
                        if(data.status == 'ok') {
                            dataTable.api().draw(false);
                        }
                        if(typeof data.message != 'undefined') {
                            $.AdminLTE.simpleRouting.callout.show(data.message);
                        }
                    };
                    if(isConfirm) {
                        $.AdminLTE.simpleRouting.ajax.run({
                            url: $this.parent().attr('href')
                        }, ajaxSuccessEliminar);
                    }
                };

                $(document.body)
                    .on('click','.js-eliminar-usuario',clickDelete);
            });
        };
    });
});
$(function () {
    $.AdminLTE.srController('video_poster', function () {
        this.index = function() {

            $('.capture').click(function (e) {
                e.preventDefault();
                var frame = captureVideoFrame(document.getElementById('video' + e.target.dataset.video),'jpeg');
                var poster = frame.dataUri;

                $.post('/admin/media/save-poster', {
                    'video': poster,
                    'path': this.dataset.videoPath
                }, function (data) {
                    console.log(data);
                });

            });
        };
    });
});
$(document).ready(function () {

    moment.locale('es');

    $.AdminLTE.srRoutes({
        '/home': function() {},
        '/admin/module':                 ['module','index'],
        '/admin/user':                   ['user','index'],
        '/admin/profile':                ['profile','index'],
        '/admin/menu/edit/{:num}':       ['menu','addAndedit'],
        '/admin/menu/add/{:num}':        ['menu','addAndedit'],
        '/admin/menu':                   ['menu','index'],
        '/admin/blog/edit/{:num}':       ['blog','edit'],
        '/admin/blog':                   ['blog','index'],
        '/admin/blog-category':          ['blog_category','index'],
        '/admin/megabanner':             ['megabanner','index'],
        '/admin/static-page':            ['static_page','index'],
        '/admin/job':                    ['job','index'],
        '/admin/job-category':           ['job_category','index'],
        '/admin/section':                ['section','index'],
        '/admin/language':               ['language','index'],
        '/admin/home-module':            ['home_module','index'],
        '/admin/app-data':               ['app_data','index'],
        '/admin/partner':                ['partner','index'],
        '/admin/media/videoPoster':      ['video_poster','index']
    }).run();
});